name: Final Project CI

on:
  push:
    branches: [ main, master ]

permissions:
  contents: read

jobs:
  build-push-run-test:
    runs-on: [self-hosted, windows]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx (optional)
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/final-project:${{ github.sha }}

      - name: Run container (background)
        shell: powershell
        run: |
          $IMAGE = "${{ secrets.DOCKERHUB_USERNAME }}/final-project:${{ github.sha }}"
          docker run -d --name final-project -p 8080:8080 $IMAGE

      - name: Wait for container to be ready
        shell: powershell
        run: |
          $MAX_RETRIES = 30
          $SLEEP = 2
          for ($i = 1; $i -le $MAX_RETRIES; $i++) {
              try {
                  Invoke-WebRequest -Uri http://localhost:8080/ -UseBasicParsing -TimeoutSec 2
                  Write-Host "Container ready"
                  break
              } catch {
                  Write-Host "Waiting for container... attempt $i/$MAX_RETRIES"
                  Start-Sleep -Seconds $SLEEP
                  if ($i -eq $MAX_RETRIES) {
                      Write-Error "Container did not start in time"
                      docker ps -a
                      docker logs final-project
                      exit 1
                  }
              }
          }

      - name: Test container response
        shell: powershell
        run: |
          $RESPONSE = curl http://localhost:8080/ | Select-String "Hello, CI Pipeline!"
          if (-not $RESPONSE) {
              Write-Error "Unexpected response from container"
              exit 1
          } else {
              Write-Host "Response is OK: $($RESPONSE.Line)"
          }

      - name: Collect container logs
        shell: powershell
        if: always()
        run: |
          docker logs final-project | Out-File -FilePath container.log -Encoding utf8

      - name: Upload logs as artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: final-project-logs
          path: container.log

      - name: Stop and remove container (cleanup)
        shell: powershell
        if: always()
        run: |
          docker stop final-project | Out-Null
          docker rm final-project | Out-Null
          docker image rm "${{ secrets.DOCKERHUB_USERNAME }}/final-project:${{ github.sha }}" | Out-Null
